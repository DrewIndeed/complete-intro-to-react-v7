=== App and Components ===
- It doesn't have to be called 'root', just a common practice.
- React library script: the interface of how to interact with React; all the methods (except one) 
will be via this library. It contains no way of rendering itself though; it's just the API.
- React DOM library script:  the rendering layer. Since we're rendering to the browser, we're using React DOM
- Our code script: must come after the other two
- React.createElement does: it makes an instance of a class. An analogy is that App as a class of 
components is like Honda has a line of cars called Civics. It's a whole line of cars with various different options and parameters. 
An instance of a Civic would be one individual car. It's a concrete instance of the Civic car line.
- Will encounter this warning: react.development.js:245 Warning: Each child in a list should have a unique "key" prop.
This will go away in build version

- At this point, App is the parent of Pet, bc App is rendering Pet. So the data flows from App down to Pet via props.
So how the data flows up? It doesn't. But how does that help? When something happens to App, I know that Pet does not
do it bc Pet has no effect on App, so we can ignore the whole seciton of code -> Good for debugging.

=== Prettier ===
- To use prettier from terminal: npx prettier <filepath> --write
- Turn on: format on save, prettier required config
- Why enable prettier required config? It will only format the project with .prettierrc
- About the .bin directory in node_modules, it contains the binary reference to the actually folder of the package 
or the library. That is why when we write scrips in package.json, it understands which folder to use when
executing the command

=== ESLint ===
- prettier does not at your code and tell you what is wrong, it will handle that for you. Eslint will look at your
code and tell you what is wrong with it.
- npm i -D eslint@8.8.0 eslint-config-prettier@8.3.0
- "eslint": "^8.8.0" -> notice the ^ -> it means that if there is 8.3.1, go grab it. If you remove it, npm will
grab the exact version that yoiu specify
- Have you ever had conflicts between pretrier and eslint? If happens, follow prettier. 
- After config of .eslintrc.json, npx eslint src/App.js. It will give tons of errors that do not follow eslint rules.
To see the errors got highlighted on VScode, download ESLint from Microsoft.
- About prettier --check, this is usually used in Github pages, to tell people that have not formatted the files using
Prettier, their build will be marked as failed. 
- To run, npm run lint -- --fix

=== Parcel ===
- A bundler, like Webpack but much easier bc it just figures everything out by itself, not manually like Webpack.
- npm i -D parcel@2.3.2 (at this point in 2.3.x)
- npm i react@17.0.2 react-dom@17.0.2
- Treeshaking: you only include the code that you use
- Pedantic?, Pragmatic?
- What a bundler: ship everything (new JS) down and make it compatible to browsers, especially older browsers. 
They dont wtf is arrow function, etc. 

=== Why not create-react-app ===
- Because cra drops you at step 14 and you dont know how you got there :)) Dont start with a functioning dev env.
Start to feel the pain of why we do something in a way. Know the tool to solve the pain that we experience.

=== "last 2 Chrome versions" ===
- Can be Firefox or anything
- Why: we dont want to include regenerators. For really really old browsers, if you go at them, they will include
things that are very hard to deal wit like polyfills, async/await, generators, ... which is a hug library and 
very hard to deal with
- If see this: regenerator not found -> delete your cache, delete dist directory, reinstall node_modules, and then,
run again with with "browserslist"

=== "last 2 Chrome versions" ===

=== JSX ===
- Takes HTML and translate them into React.createElement calls, you dont have to worry about it
- So it helps you to think in HTML, but you write in JS, and forget about the middle cognitive step
- Do we need to explicitly import React from react? Actually no. Bc: it is used to be before the most recent version of React, the React JSX transforms from Babel. 
- At this point, ESLint will give warnings about unused Components but they are beiong used

=== Fix ESLINT for JSX ===
- npm install -D eslint-plugin-import@2.25.4 eslint-plugin-jsx-a11y@6.5.1 eslint-plugin-react@7.28.0
- Plugins:
    + react: to comprehend what React is doing
    + import: to work around logic imports, eslint only checks 1 file at the time, this allows eslist to check multiple files at the time
    + a11y: accessibility, check things like are you putting alt on an image, are you not making buttons that are links?
- Rules: 
    + prop types: either use TypeScript or use nothing, it is used to be a package that can do some basic type validation
    + react in jsx scope: stop warnings about not importing React from react when using jsx
- Settings:
    + react: bc React has changed over the years, need this for specifically the React plugin
        + version = detect: look that the package and figure it out bruh

=== Search form component ===
- Hooks are to add statefulness to UI
- Everytime that you render your React component, it is like a snapshot of given this state and this props, my component will always look like this
- State hooks are called in order
- Rules of thumb: do not put them in loops, if statements

=== useEffect: fetch pets ===
- why using id for key is bad? Bc if 2 things swap, their indexes wont change, React will think that nothing changed but the problem is something did change
- Use: // eslint-disable-line react-hooks/exhaustive-deps -> ignore the empty dependency array warning

=== Custom hook ===
- If you have serveral hooks in a row, and that can also be applied for another component, make custom hook
- For example, if you have a city, you can create useZipCode to get that city zip code by providing the location
- Why not using regular function but useEffect in a custom hook? 
    + Bc you want the first render to go completely through from start to finish and not interrupted. So when it renders the first time, it renders an empty state, so that user sees something. The EFFECTS then are SCHEDULED to run immediately (relatively to human, cuz it runs in ms) afterwards. React will handle scheduling and then eventually evoke that. 
    + Notice the dependency array. By doing this way, if dependent targets in the array change in the future, React knows to run these effects over and over again. Otherwise, we would do some sort of state tracking ourselves
- NEVER EVER USE ALERT IN YOUR CODE, UNHOLY ABOMINATION OF CODE

=== Handling user input ===
- Catch form submit event is the easiest way to submit a form
- Read more about React Supported Events

=== Component Composition ===
- 100 - 150 - 200 lines -> long component

=== Build for production ===
- Use parcel build -> will automatically switch to NODE_ENV=production -> strip out all the dev tools -> smaller bundle size
- DONT SHIP DEV MODE TO PRODUCTION
- Dev bundle: 1.2 MB - Build bundle: 255 kB -> ~ 10x larger. 
    + How to get this? Dev at 1234, serve build at 3000. Open Network tab, reload both of them. Find the bundled index files, they are usually index.[hash].js. Check the sizes of them and you will see

=== Strict Mode ===
- Add additional checks that future proof your application
- It's good to keep your team in line and not using legacy features or things that will be soon be deprecated
- It does nothing in Production

==== React Router ===
- npm i react-router-dom@6.2.1
- BrowserRouter: the parent component that governs all the internal state of the router
- When do I wanna have multiple routers? For example, when you have a little helper on your website, you might want to have a router for that and a core router for your page. It is acutally uncommon.
- Routes: like the Switch in older versions of React. It says that one of the route is going to be rendered at a time
- Route: about path="/details/:id": 
    + id is just a name.,it can be anything 
    + it can be more than 1 trailing like :id, for exampke, :cat, :blabla, :andrew
- Why Link but not <a>? Yup, the end result will be the same, but there are a lot of additional logic added to Link so that its relative path will always the same no matter which brower router context it belongs to
- At the target page that you navigate to, you can access the params of the Browser Router context through useParams hook (Router v6). Try this: http://localhost:1234/details/literallyAnything -> :id will be literallyAnything
- 